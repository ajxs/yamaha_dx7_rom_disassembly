#!/usr/bin/env python3

"""
Transforms the source code to a format supported by the dasm assembler.
"""

import getopt
import re
import sys

INPUT_FILE = None
OUTPUT_FILE = None

# This constant stores the dasm assembler macros used to support the HD6303-specific
# instructions used in the source.
DASM_MACROS = """
; ==============================================================================
; DASM HD6303 MACROS
; As found at:
; https://github.com/dasm-assembler/dasm/blob/master/test/broken6303hack.asm
; ==============================================================================
    .mac hack
        dc.b {1}     ; opcode
        dc.b {2}     ; immediate value
        dc.b {3}     ; zero-page address
    .endm

    .mac aimd
        hack $71,{1},{2}
    .endm

    .mac aimx
        hack $61,{1},{2}
    .endm

    .mac oimd
        hack $72,{1},{2}
    .endm

    .mac oimx
        hack $62,{1},{2}
    .endm

    .mac eimd
        hack $75,{1},{2}
    .endm

    .mac eimx
        hack $65,{1},{2}
    .endm

    .mac timd
        hack $7b,{1},{2}
    .endm

    .mac timx
        hack $6b,{1},{2}
    .endm\n\n
"""


def convert_unsupported_opcodes(input_text):
    """
    Converts the unsupported HD6303 instructions to use the dasm-specific macros defined
    in this script.
    Refer to the dasm documentation for more information.
    """

    converted_source = input_text

    converted_source = re.sub(
        r"(AIM|OIM|TIM)\s+(.*), (.*),x",
        lambda match: f"{match.group(1)}X   {match.group(2)}, {match.group(3)}",
        converted_source,
        flags=re.MULTILINE
    )

    converted_source = re.sub(
        r"(AIM|OIM|TIM)\s+(.*), (.*)",
        lambda match: f"{match.group(1)}D   {match.group(2)}, {match.group(3)}",
        converted_source,
        flags=re.MULTILINE
    )

    return converted_source


def convert_data_directives(input_text):
    """
    Converts the assembler data directives in the source file to the format expected
    by the dasm assembler.
    """

    converted_source = input_text

    converted_source = re.sub(
        r"\bFCB\b",
        "DC.B",
        converted_source,
        flags=re.MULTILINE
    )

    converted_source = re.sub(
        r"\bFDB\b",
        "DC.W",
        converted_source,
        flags=re.MULTILINE
    )

    converted_source = re.sub(
        r"\bFCC\b",
        "DC",
        converted_source,
        flags=re.MULTILINE
    )

    return converted_source


def convert_literals_to_dasm_format(input_text):
    """
    Converts numeric literals to dasm's supported format.
    dasm expects literals to be expressed without a trailing quote.
    """

    return re.sub(
        r"#'([\w\.\-\=\? ]+)'",
        lambda match: f"#'{match.group(1)}",
        input_text,
        flags=re.MULTILINE
    )


def fix_question_marked_labels(input_text):
    """
    Dasm does not support the question mark character being used in labels.
    This function replaces the question marks used in labels with an arbitrary string
    designed to ensure that the label does not collide with another.
    """

    converted_source = input_text
    REGEX_LABEL_WITH_QMARK = r"^([\w?]+\?):"

    matched_label = re.search(REGEX_LABEL_WITH_QMARK, converted_source, flags=re.MULTILINE)
    while matched_label:
        # The regex search string to use.
        # This ensures that all non-alphanumeric characters which could be interpreted
        # as regex directives are escaped, and that search is performed along a word
        # boundary
        regex_search_string = r"\b({})".format(re.escape(matched_label.group(1)))
        replacement_label = matched_label.group(1).replace('?', '_Q')

        print(f"Replacing label: '{matched_label.group(1)}' with '{replacement_label}'")

        converted_source = re.sub(
            regex_search_string,
            replacement_label,
            converted_source,
            flags=re.MULTILINE
        )

        matched_label = re.search(REGEX_LABEL_WITH_QMARK, converted_source, flags=re.MULTILINE)

    return converted_source


def fix_org_directive(input_text):
    """
    Dasm will not correctly parse directives in the first column. This function indents
    the 'ORG' directive correctly.
    """

    return input_text.replace("ORG $C000", "    ORG $C000")


def fix_double_char_literal(input_text):
    """
    Resolves issues related to the source code using a 'double char literal' to load
    two ASCII characters into the ACCD register, which dasm cannot parse.
    """

    string_as_num_hz = (ord('H') << 8) | ord('z')
    string_as_num_op = (ord('O') << 8) | ord('P')

    converted_source = input_text.replace(
        "    LDD     #'Hz'",
        f"    LDD     #{string_as_num_hz}"
    )
    converted_source = converted_source.replace(
        "    LDD     #'OP'",
        f"    LDD     #{string_as_num_op}"
    )

    return converted_source


def fix_addressing_mode(input_text):
    """
    Fixes the addressing mode of instructions used in the dasm assembler to match the
    extended addressing mode used in the original DX7 ROM.
    The dasm assembler will use direct addressing where possible, i.e if the address of an
    operand can be expressed in 8 bits. The DX7 ROM uses extended addressing in all cases.
    This function fixes every opcode referencing a memory address to use extended
    addressing unless explicitly stated otherwise.
    Refer to: https://github.com/dasm-assembler/dasm/issues/41 for more information
    on this syntax.
    """

    converted_source = input_text

    converted_source = re.sub(
        r"    (AND|ADD|SUB|LDA|ORA|EOR|STA|CMP)(\w)    M_",
        lambda match: f"    {match.group(1)}{match.group(2)}.W  M_",
        converted_source,
        flags=re.MULTILINE
    )

    converted_source = re.sub(
        r"    (ASL|CLR|COM|DEC|INC|LDD|LDX|ROL|ROR|STD|TST)(\w)    M_",
        lambda match: f"    {match.group(1)}.W  M_",
        converted_source,
        flags=re.MULTILINE
    )

    return converted_source


def transform_file():
    """
    Transforms the source assembly file into a format supported by the dasm assembler.
    """

    try:
        with open(INPUT_FILE, 'r') as input_file, open(OUTPUT_FILE, 'w+') as output_file:
            input_text = input_file.read()

            converted_source = convert_data_directives(input_text)
            converted_source = fix_question_marked_labels(converted_source)
            converted_source = fix_org_directive(converted_source)
            converted_source = fix_double_char_literal(converted_source)
            converted_source = convert_literals_to_dasm_format(converted_source)
            converted_source = convert_unsupported_opcodes(converted_source)
            converted_source = fix_addressing_mode(converted_source)

            # Add the Dasm processor directive to instruct the assember that this is a
            # HD6303 source file.
            output_file.write("    .PROCESSOR HD6303")
            # Write the dasm specific macros used to support the 6303-specific instructions.
            output_file.write(DASM_MACROS)
            output_file.write(converted_source)

    except FileNotFoundError:
        print("Error: Unable to open assembler files. Exiting.", file=sys.stderr)
        exit(1)


def print_usage():
    """Prints script usage to STDOUT."""

    print(
        """
        Usage: convert_to_dasm_format
        --input_file <string> --output_file <string>
        """
    )


if __name__ == "__main__":
    try:
        OPTS, ARGS = getopt.getopt(
            sys.argv[1:],
            "h",
            [
                "input_file=",
                "output_file=",
            ]
        )
    except getopt.GetoptError:
        print_usage()
        sys.exit(2)
    for opt, arg in OPTS:
        if opt == '-h':
            print_usage()
            sys.exit()
        elif opt == "--input_file":
            INPUT_FILE = arg
        elif opt == "--output_file":
            OUTPUT_FILE = arg

    if INPUT_FILE is None:
        print("Invalid input file provided! Exiting.")
        exit(1)

    if OUTPUT_FILE is None:
        print("Invalid output file provided! Exiting.")
        exit(1)

    transform_file()
